// <auto-generated />
using System;
using MQC.ServerLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ServerLibrary.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogAction")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppLogs", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5bd5c2f7-a94c-4f02-aa06-b36430f730be"),
                            Description = "Quản trị hệ thống",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("f706357f-8884-449c-89e7-94e903ee40bc"),
                            Description = "Quản lý",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("1442ee19-193f-4629-b867-aea19a1f4e45"),
                            Description = "Người dùng",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("UserName");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("948f3047-5c1c-4e78-92c2-06128ded41b3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ac653c1-64b7-4cbe-bc24-a20073fe9c77",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Hoằng",
                            LabId = 1,
                            LastName = "Nguyễn Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJv6Z0mUvAR8dIs06/uU6mcEl6+k1HgGljYr4znr/UFtEINKMmXYUSQvlTecy6RxVg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06c3b09d-747b-4933-889f-761b45f61ae9",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Định danh"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Thử nghiệm"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Kháng sinh đồ"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationName");

                    b.ToTable("Laboratories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "315 Nguyễn Văn Linh - An Khánh - Ninh Kiều - Tp. Cần Thơ",
                            LabName = "Khoa Xét Nghiệm",
                            LabStatus = 1,
                            OrganizationName = "BVĐKTƯ Cần Thơ"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("date")
                        .HasAnnotation("CheckConstraint", "ExpDate >= GETDATE()");

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("LotSupplies", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("date")
                        .HasAnnotation("CheckConstraint", "ExpDate >= GETDATE()");

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestQCId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestQCId");

                    b.ToTable("LotTests", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Methods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MethodName = "Thủ công"
                        },
                        new
                        {
                            Id = 2,
                            MethodName = "Tự động trên máy Vitek"
                        },
                        new
                        {
                            Id = 3,
                            MethodName = "Tự động trên máy BD"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QCDate")
                        .HasColumnType("date")
                        .HasAnnotation("CheckConstraint", "QCDate <= GETDATE()");

                    b.Property<int>("QCProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ReQCId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("QCProfileId");

                    b.HasIndex("ReQCId");

                    b.HasIndex("UserId");

                    b.ToTable("QCs", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActionName");

                    b.ToTable("QCActions", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Hide")
                        .HasColumnType("bit");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<string>("QCName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LabId");

                    b.HasIndex("MethodId");

                    b.ToTable("QCProfiles", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCProfileDetail", b =>
                {
                    b.Property<int>("QCProfileId")
                        .HasColumnType("int");

                    b.Property<int>("StandardDetailId")
                        .HasColumnType("int");

                    b.HasKey("QCProfileId", "StandardDetailId");

                    b.HasIndex("StandardDetailId");

                    b.ToTable("QCProfileDetails", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Evaluate")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("LotTestId")
                        .HasColumnType("int");

                    b.Property<int>("QCId")
                        .HasColumnType("int");

                    b.Property<string>("QCResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardDetailId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LotTestId");

                    b.HasIndex("QCId");

                    b.HasIndex("StandardDetailId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Results", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName");

                    b.ToTable("Standards", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StandardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Concentration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("LimitMax")
                        .HasColumnType("real");

                    b.Property<float?>("LimitMin")
                        .HasColumnType("real");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<string>("Normal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Qualitative")
                        .HasColumnType("bit");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<int>("StrainId")
                        .HasColumnType("int");

                    b.Property<int>("TestQCId")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MethodId");

                    b.HasIndex("StandardId");

                    b.HasIndex("StrainId");

                    b.HasIndex("TestQCId");

                    b.ToTable("StandardDetails", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Strain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("StrainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Strains", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StrainGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupName");

                    b.ToTable("StrainGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupName = "Gram âm"
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "Gram dương"
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "Vi nấm"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StrainType", b =>
                {
                    b.Property<int>("StrainId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.HasKey("StrainId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StrainTypes", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("Supplies", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.SupplyProfile", b =>
                {
                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<int>("QCProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.HasKey("SupplyId", "QCProfileId");

                    b.HasIndex("QCProfileId");

                    b.ToTable("SupplyProfiles", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MethodId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestProfiles", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestQC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("TestQCName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestQCs", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Kháng sinh đĩa giấy",
                            Unit = "mm"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Kháng sinh E-test"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Kháng sinh tự động",
                            Unit = "µg/ml"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Đĩa thử nghiệm",
                            Unit = "mm"
                        },
                        new
                        {
                            Id = 5,
                            TypeName = "Định danh tự động"
                        });
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.UseWith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LotSupplyId")
                        .HasColumnType("int");

                    b.Property<int>("QCId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotSupplyId");

                    b.HasIndex("QCId");

                    b.HasIndex("SupplyId");

                    b.ToTable("UseWiths", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5bd5c2f7-a94c-4f02-aa06-b36430f730be"),
                            UserId = new Guid("948f3047-5c1c-4e78-92c2-06128ded41b3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppLog", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.AppUser", "User")
                        .WithMany("AppLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppUser", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Laboratory", "Laboratory")
                        .WithMany("Users")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotSupply", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Supply", "Supply")
                        .WithMany("LotSupplies")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotTest", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.TestQC", "TestQC")
                        .WithMany("LotTests")
                        .HasForeignKey("TestQCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQC");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QC", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Laboratory", "Laboratory")
                        .WithMany("QCs")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.QCProfile", "QCProfile")
                        .WithMany("QCs")
                        .HasForeignKey("QCProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.QC", "ReQC")
                        .WithMany()
                        .HasForeignKey("ReQCId");

                    b.HasOne("MQC.BaseLibrary.Entities.AppUser", "User")
                        .WithMany("QCs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("QCProfile");

                    b.Navigation("ReQC");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCProfile", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Category", "Category")
                        .WithMany("QCProfiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Laboratory", "Laboratory")
                        .WithMany("QCProfiles")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Method", "Method")
                        .WithMany("QCProfiles")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Laboratory");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCProfileDetail", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.QCProfile", "QCProfile")
                        .WithMany("QCProfileDetails")
                        .HasForeignKey("QCProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.StandardDetail", "StandardDetail")
                        .WithMany("QCProfileDetails")
                        .HasForeignKey("StandardDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QCProfile");

                    b.Navigation("StandardDetail");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Result", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.LotTest", "LotTest")
                        .WithMany("Results")
                        .HasForeignKey("LotTestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQC.BaseLibrary.Entities.QC", "QC")
                        .WithMany("Results")
                        .HasForeignKey("QCId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.StandardDetail", "StandardDetail")
                        .WithMany("Results")
                        .HasForeignKey("StandardDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.AppUser", "User")
                        .WithMany("Results")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LotTest");

                    b.Navigation("QC");

                    b.Navigation("StandardDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StandardDetail", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Category", "Category")
                        .WithMany("StandardDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Method", "Method")
                        .WithMany("StandardDetails")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Standard", "Standard")
                        .WithMany("StandardDetails")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Strain", "Strain")
                        .WithMany("StandardDetails")
                        .HasForeignKey("StrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.TestQC", "TestQC")
                        .WithMany("StandardDetails")
                        .HasForeignKey("TestQCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Method");

                    b.Navigation("Standard");

                    b.Navigation("Strain");

                    b.Navigation("TestQC");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Strain", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.StrainGroup", "StrainGroup")
                        .WithMany("Strains")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrainGroup");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StrainType", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Category", "Category")
                        .WithMany("StrainTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Strain", "Strain")
                        .WithMany("StrainTypes")
                        .HasForeignKey("StrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Strain");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Supply", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Method", "Method")
                        .WithMany("Supplies")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.SupplyProfile", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.QCProfile", "QCProfile")
                        .WithMany("SupplyProfiles")
                        .HasForeignKey("QCProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Supply", "Supply")
                        .WithMany("SupplyProfiles")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QCProfile");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestProfile", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.Category", "Category")
                        .WithMany("TestProfiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Method", "Method")
                        .WithMany("TestProfiles")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.TestType", "TestType")
                        .WithMany("TestProfiles")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Method");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestQC", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.TestType", "TestType")
                        .WithMany("TestQCs")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.UseWith", b =>
                {
                    b.HasOne("MQC.BaseLibrary.Entities.LotSupply", "LotSupply")
                        .WithMany("UseWiths")
                        .HasForeignKey("LotSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.QC", "QC")
                        .WithMany("UseWiths")
                        .HasForeignKey("QCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MQC.BaseLibrary.Entities.Supply", "Supply")
                        .WithMany("UseWiths")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LotSupply");

                    b.Navigation("QC");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.AppUser", b =>
                {
                    b.Navigation("AppLogs");

                    b.Navigation("QCs");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Category", b =>
                {
                    b.Navigation("QCProfiles");

                    b.Navigation("StandardDetails");

                    b.Navigation("StrainTypes");

                    b.Navigation("TestProfiles");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Laboratory", b =>
                {
                    b.Navigation("QCProfiles");

                    b.Navigation("QCs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotSupply", b =>
                {
                    b.Navigation("UseWiths");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.LotTest", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Method", b =>
                {
                    b.Navigation("QCProfiles");

                    b.Navigation("StandardDetails");

                    b.Navigation("Supplies");

                    b.Navigation("TestProfiles");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QC", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("UseWiths");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.QCProfile", b =>
                {
                    b.Navigation("QCProfileDetails");

                    b.Navigation("QCs");

                    b.Navigation("SupplyProfiles");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Standard", b =>
                {
                    b.Navigation("StandardDetails");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StandardDetail", b =>
                {
                    b.Navigation("QCProfileDetails");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Strain", b =>
                {
                    b.Navigation("StandardDetails");

                    b.Navigation("StrainTypes");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.StrainGroup", b =>
                {
                    b.Navigation("Strains");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.Supply", b =>
                {
                    b.Navigation("LotSupplies");

                    b.Navigation("SupplyProfiles");

                    b.Navigation("UseWiths");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestQC", b =>
                {
                    b.Navigation("LotTests");

                    b.Navigation("StandardDetails");
                });

            modelBuilder.Entity("MQC.BaseLibrary.Entities.TestType", b =>
                {
                    b.Navigation("TestProfiles");

                    b.Navigation("TestQCs");
                });
#pragma warning restore 612, 618
        }
    }
}
